#lang sicp

; segment
(define (make-segment x y)
  (cons (min x y) (max x y))
)
(define (segment-start s) (car s))
(define (segment-end s) (cdr s))
; rect-segment
(define (rect-length-s r)
  (let ((x (car (cdr r))))
    (- (segment-end x) (segment-start x))
  )
)
(define (rect-height-s r)
  (let ((y (cdr (cdr r))))
    (- (segment-end y) (segment-start y))
  )
)
; this is legal, right? Include getters into the rect itself, OOP-like
(define (make-rect-s x1 y1 x2 y2)
  (cons
    (cons rect-length-s rect-height-s)
    (cons (make-segment x1 x2) (make-segment y1 y2))
  )
)

; point
(define (make-point x y)
  (cons x y)
)
(define (point-x p) (car p))
(define (point-y p) (cdr p))
; rect-point
(define (rect-length-p r)
  (let ((p1 (car (cdr r))) (p2 (cdr (cdr r))))
    (abs (- (point-x p1) (point-x p2)))
  )
)
(define (rect-height-p r)
  (let ((p1 (car (cdr r))) (p2 (cdr (cdr r))))
    (abs (- (point-y p1) (point-y p2)))
  )
)
(define (make-rect-p x1 y1 x2 y2)
  (cons
    (cons rect-length-p rect-height-p)
    (cons (make-point x1 y1) (make-point x2 y2))
  )
)
; ~generic
(define (rect-length-getter r) (car (car r)))
(define (rect-height-getter r) (cdr (car r)))
(define (rect-area r)
  (let ((length ((rect-length-getter r) r)) (height ((rect-height-getter r) r)))
    (* length height)
  )
)
(define (rect-perimeter r)
  (let ((length ((rect-length-getter r) r)) (height ((rect-height-getter r) r)))
    (+ (* 2 length) (* 2 height))
  )
)

(newline)
(display "-1 1 3 -1")
(newline)
(display "Segment way:")
(define some-rect-s (make-rect-s -1 1 3 -1))
(newline)
(display (rect-perimeter some-rect-s))
(newline)
(display (rect-area some-rect-s))
(newline)
(display "Point way for:")
(define some-rect-p (make-rect-p -1 1 3 -1))
(newline)
(display (rect-perimeter some-rect-p))
(newline)
(display (rect-area some-rect-p))

(newline)
(display "10 3 4 2")
(newline)
(display "Segment way:")
(define some-rect-s2 (make-rect-s 10 3 4 2))
(newline)
(display (rect-perimeter some-rect-s2))
(newline)
(display (rect-area some-rect-s2))
(newline)
(display "Point way for:")
(define some-rect-p2 (make-rect-p 10 3 4 2))
(newline)
(display (rect-perimeter some-rect-p2))
(newline)
(display (rect-area some-rect-p2))

